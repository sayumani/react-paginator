{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["LEFT_PAGE","range","step","i","Pagination","fetchPageNumbers","state","totalPages","currentPage","pageNeighbours","totalNumbers","startPage","Math","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","extraPages","pageList","Set","Array","gotoPage","props","onPageChanged","paginationData","pageLimit","totalRecords","handleClick","evt","handleMoveLeft","handleMoveRight","componentDidUpdate","prevProps","this","render","console","className","styles","bootstrapStyle","page","key","index","href","onClick","App","data","list","offset","currentList","slice","setState","handleChange","value","currentTarget","fetchData","axios","get","res","length","tRow","map","item","albumId","title","url","onChange","style","overflowX","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e4961bba.chunk.js","sourcesContent":["import React, { Component, Fragment, MouseEvent } from 'react'\nimport bootstrapStyle from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport styles from './styles.module.css'\n\n// Props type for components props\ninterface Props {\n  totalRecords: number\n  pageLimit?: number\n  pageNeighbours?: number\n  onPageChanged?: (params: PageData) => void\n}\n\n// PageData type for pagination data\nexport interface PageData {\n  currentPage: number\n  pageLimit: number\n  totalRecords: number\n  totalPages: number\n}\n\n// State type for component state\ninterface State {\n  totalRecords: number\n  pageLimit: number\n  pageNeighbours: number\n  currentPage: number\n  totalPages: number\n}\n// constants\nconst LEFT_PAGE = 'LEFT'\nconst RIGHT_PAGE = 'RIGHT'\n\nconst range = (from: number, to: number, step = 1): any[] => {\n  let i = from\n  const range = []\n  while (i <= to) {\n    range.push(i)\n    i += step\n  }\n  return range\n}\n\nexport class Pagination extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      currentPage: 1,\n      pageLimit: 30,\n      totalRecords: 0,\n      pageNeighbours: 0,\n      totalPages: 1\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.totalRecords !== this.props.totalRecords ||\n      prevProps.pageLimit !== this.props.pageLimit\n    ) {\n      let {\n        totalRecords = null,\n        pageLimit = 30,\n        pageNeighbours = 0\n      } = this.props\n      pageLimit = typeof pageLimit === 'number' ? pageLimit : 30\n      totalRecords = typeof totalRecords === 'number' ? totalRecords : 0\n      // pageNeighbours can be: 0, 1 or 2\n      pageNeighbours =\n        typeof pageNeighbours === 'number'\n          ? Math.max(0, Math.min(pageNeighbours, 2))\n          : 0\n      const totalPages = Math.ceil(totalRecords / pageLimit)\n      const currentPage =\n        prevProps.pageLimit !== this.props.pageLimit\n          ? 1\n          : this.state.currentPage\n      this.setState({\n        currentPage,\n        pageLimit,\n        totalRecords,\n        pageNeighbours,\n        totalPages\n      })\n    }\n  }\n\n  fetchPageNumbers = () => {\n    const { totalPages, currentPage, pageNeighbours } = this.state\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = pageNeighbours * 2 + 3\n    const totalBlocks = totalNumbers + 2\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours)\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours)\n      let pages = range(startPage, endPage)\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2\n      const hasRightSpill = totalPages - endPage > 1\n      const spillOffset = totalNumbers - (pages.length + 1)\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = range(startPage - spillOffset, startPage - 1)\n          pages = [LEFT_PAGE, ...extraPages, ...pages]\n          break\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case !hasLeftSpill && hasRightSpill: {\n          const extraPages = range(endPage + 1, endPage + spillOffset)\n          pages = [...pages, ...extraPages, RIGHT_PAGE]\n          break\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE]\n          break\n        }\n      }\n      const pageList = new Set([1, ...pages, totalPages])\n      return Array.from(pageList)\n    }\n    return range(1, totalPages)\n  }\n\n  gotoPage = (page: number) => {\n    const { onPageChanged = (f) => f } = this.props\n    const currentPage = Math.max(0, Math.min(page, this.state.totalPages))\n    const paginationData = {\n      currentPage,\n      totalPages: this.state.totalPages,\n      pageLimit: this.state.pageLimit,\n      totalRecords: this.state.totalRecords\n    }\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData))\n  }\n\n  handleClick = (page: number) => (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(page)\n  }\n\n  handleMoveLeft = (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(this.state.currentPage - this.state.pageNeighbours * 2 - 1)\n  }\n\n  handleMoveRight = (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(this.state.currentPage + this.state.pageNeighbours * 2 + 1)\n  }\n\n  render() {\n    if (!this.state.totalRecords || this.state.totalPages === 1) return null\n    console.log(this.state)\n\n    const { currentPage } = this.state\n    const pages = this.fetchPageNumbers()\n\n    return (\n      <Fragment>\n        <nav aria-label='Pagination' className={styles['paginator']}>\n          <ul className={bootstrapStyle.pagination}>\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className={bootstrapStyle['page-item']}>\n                    <a\n                      className={bootstrapStyle['page-link']}\n                      href='#'\n                      aria-label='Previous'\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden='true'>&laquo;</span>\n                      <span className='sr-only'>Previous</span>\n                    </a>\n                  </li>\n                )\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className={bootstrapStyle['page-item']}>\n                    <a\n                      className={bootstrapStyle['page-link']}\n                      href='#'\n                      aria-label='Next'\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden='true'>&raquo;</span>\n                      <span className='sr-only'>Next</span>\n                    </a>\n                  </li>\n                )\n\n              return (\n                <li\n                  key={index}\n                  className={\n                    currentPage === page\n                      ? `${bootstrapStyle['page-item']} ${bootstrapStyle['active']}`\n                      : `${bootstrapStyle['page-item']}`\n                  }\n                >\n                  <a\n                    className={bootstrapStyle['page-link']}\n                    href='#'\n                    onClick={this.handleClick(page)}\n                  >\n                    {page}\n                  </a>\n                </li>\n              )\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    )\n  }\n}\n","import React from 'react'\nimport { Pagination, PageData } from 'react-paginator'\nimport axios from '../node_modules/axios'\nimport 'react-paginator/dist/index.css'\ninterface Props {}\ninterface State {\n  totalRecords: number\n  list: any[]\n  currentList: any[]\n  currentPage: number\n  pageLimit?: number\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      totalRecords: 0,\n      currentPage: 0,\n      list: [],\n      currentList: [],\n      pageLimit: 25\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  onPageChanged = (data: PageData) => {\n    const { list } = this.state\n    const { currentPage, pageLimit } = data\n    const offset = (currentPage - 1) * pageLimit\n    const currentList = list.slice(offset, offset + pageLimit)\n    this.setState({ currentPage, currentList })\n  }\n\n  async fetchData() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/photos')\n    this.setState({\n      list: res.data,\n      currentList: res.data.slice(0, 30),\n      totalRecords: res.data.length\n    })\n  }\n\n  handleChange = (evt: React.FormEvent<HTMLSelectElement>) => {\n    const { value } = evt.currentTarget\n    this.setState({\n      pageLimit: +value,\n      currentList: this.state.list.slice(0, +value)\n    })\n  }\n\n  render() {\n    const tRow = this.state.currentList.map((item: any, index: number) => {\n      return (\n        <tr key={index}>\n          <td>{item.albumId}</td>\n          <td>{item.title}</td>\n          <td>{item.url}</td>\n        </tr>\n      )\n    })\n    return (\n      <div>\n        <div className='container'>\n          <label className='label'>PageLimit</label>\n          <select\n            className='select'\n            value={this.state.pageLimit}\n            onChange={this.handleChange}\n          >\n            <option value='25'>25</option>\n            <option value='50'>50</option>\n            <option value='100'>100</option>\n          </select>\n        </div>\n        <div style={{ overflowX: 'auto' }}>\n          <table>\n            <thead>\n              <tr>\n                <th>AlbumId</th>\n                <th>Title</th>\n                <th>URL</th>\n              </tr>\n            </thead>\n            <tbody>{tRow}</tbody>\n          </table>\n        </div>\n        <Pagination\n          totalRecords={this.state.totalRecords}\n          onPageChanged={this.onPageChanged}\n          pageLimit={this.state.pageLimit}\n          pageNeighbours={2}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}