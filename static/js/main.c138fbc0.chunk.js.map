{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["LEFT_PAGE","range","step","i","constructor","props","fetchPageNumbers","pageNeighbours","totalNumbers","totalPages","startPage","Math","currentPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","extraPages","gotoPage","page","onPageChanged","f","paginationData","pageLimit","totalRecords","handleClick","evt","handleMoveLeft","handleMoveRight","prevProps","this","state","console","className","bootstrapStyle","key","index","href","onClick","App","data","list","offset","currentList","slice","setState","fetchData","axios","get","res","length","map","item","JSON","stringify","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c138fbc0.chunk.js","sourcesContent":["import React, { Component, Fragment, MouseEvent } from 'react'\nimport bootstrapStyle from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\ninterface Props {\n  totalRecords: number\n  pageLimit?: number\n  pageNeighbours?: number\n  onPageChanged: (params: PageData) => void\n}\n\ninterface PageData {\n  currentPage: number\n  pageLimit: number\n  totalRecords: number\n  totalPages: number\n}\ninterface State {\n  totalRecords: number\n  pageLimit: number\n  pageNeighbours: number\n  currentPage: number\n  totalPages: number\n}\nconst LEFT_PAGE = 'LEFT'\nconst RIGHT_PAGE = 'RIGHT'\n\nconst range = (from: number, to: number, step = 1): any[] => {\n  let i = from\n  const range = []\n  while (i <= to) {\n    range.push(i)\n    i += step\n  }\n  return range\n}\nclass Pagination extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    // let { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props\n    // pageLimit = typeof pageLimit === 'number' ? pageLimit : 30\n    // totalRecords = typeof totalRecords === 'number' ? totalRecords : 0\n    // pageNeighbours can be: 0, 1 or 2\n    // pageNeighbours =\n    // typeof pageNeighbours === 'number'\n    // ? Math.max(0, Math.min(pageNeighbours, 2))\n    // : 0\n    // const totalPages = Math.ceil(totalRecords / pageLimit)\n    // const initialState: State = {\n    //   currentPage: 1,\n    //   pageLimit,\n    //   totalRecords,\n    //   pageNeighbours,\n    //   totalPages\n    // }\n    const initialState: State = {\n      currentPage: 0,\n      pageLimit: 30,\n      totalRecords: 0,\n      pageNeighbours: 0,\n      totalPages: 0\n    }\n    this.state = initialState\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.totalRecords !== this.props.totalRecords ||\n      prevProps.pageLimit !== this.props.pageLimit\n    ) {\n      let {\n        totalRecords = null,\n        pageLimit = 30,\n        pageNeighbours = 0\n      } = this.props\n      pageLimit = typeof pageLimit === 'number' ? pageLimit : 30\n      totalRecords = typeof totalRecords === 'number' ? totalRecords : 0\n      // pageNeighbours can be: 0, 1 or 2\n      pageNeighbours =\n        typeof pageNeighbours === 'number'\n          ? Math.max(0, Math.min(pageNeighbours, 2))\n          : 0\n      const totalPages = Math.ceil(totalRecords / pageLimit)\n      const currentPage =\n        prevProps.pageLimit !== this.props.pageLimit\n          ? 1\n          : this.state.currentPage\n      this.setState({\n        currentPage,\n        pageLimit,\n        totalRecords,\n        pageNeighbours,\n        totalPages\n      })\n    }\n  }\n  fetchPageNumbers = () => {\n    const { totalPages, currentPage, pageNeighbours } = this.state\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = pageNeighbours * 2 + 3\n    const totalBlocks = totalNumbers + 2\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours)\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours)\n      let pages = range(startPage, endPage)\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2\n      const hasRightSpill = totalPages - endPage > 1\n      const spillOffset = totalNumbers - (pages.length + 1)\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = range(startPage - spillOffset, startPage - 1)\n          pages = [LEFT_PAGE, ...extraPages, ...pages]\n          break\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case !hasLeftSpill && hasRightSpill: {\n          const extraPages = range(endPage + 1, endPage + spillOffset)\n          pages = [...pages, ...extraPages, RIGHT_PAGE]\n          break\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE]\n          break\n        }\n      }\n\n      return [1, ...pages, totalPages]\n    }\n    return range(1, totalPages)\n  }\n\n  componentDidMount() {\n    this.gotoPage(1)\n  }\n\n  gotoPage = (page: number) => {\n    const { onPageChanged = (f) => f } = this.props\n    const currentPage = Math.max(0, Math.min(page, this.state.totalPages))\n    const paginationData = {\n      currentPage,\n      totalPages: this.state.totalPages,\n      pageLimit: this.state.pageLimit,\n      totalRecords: this.state.totalRecords\n    }\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData))\n  }\n\n  handleClick = (page: number) => (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(page)\n  }\n\n  handleMoveLeft = (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(this.state.currentPage - this.state.pageNeighbours * 2 - 1)\n  }\n\n  handleMoveRight = (evt: MouseEvent) => {\n    evt.preventDefault()\n    this.gotoPage(this.state.currentPage + this.state.pageNeighbours * 2 + 1)\n  }\n\n  render() {\n    if (!this.state.totalRecords || this.state.totalPages === 1) return null\n    console.log(this.state)\n\n    const { currentPage } = this.state\n    const pages = this.fetchPageNumbers()\n\n    return (\n      <Fragment>\n        <nav aria-label='Pagination'>\n          <ul className={bootstrapStyle.pagination}>\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className={bootstrapStyle['page-item']}>\n                    <a\n                      className={bootstrapStyle['page-link']}\n                      href='#'\n                      aria-label='Previous'\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden='true'>&laquo;</span>\n                      <span className='sr-only'>Previous</span>\n                    </a>\n                  </li>\n                )\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className={bootstrapStyle['page-item']}>\n                    <a\n                      className={bootstrapStyle['page-link']}\n                      href='#'\n                      aria-label='Next'\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden='true'>&raquo;</span>\n                      <span className='sr-only'>Next</span>\n                    </a>\n                  </li>\n                )\n\n              return (\n                <li\n                  key={index}\n                  className={\n                    currentPage === page\n                      ? `${bootstrapStyle['page-item']} ${bootstrapStyle['active']}`\n                      : `${bootstrapStyle['page-item']}`\n                  }\n                >\n                  <a\n                    className={bootstrapStyle['page-link']}\n                    href='#'\n                    onClick={this.handleClick(page)}\n                  >\n                    {page}\n                  </a>\n                </li>\n              )\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    )\n  }\n}\n\nexport { Pagination, PageData }\n","import React from 'react'\nimport { Pagination, PageData } from 'react-paginator'\nimport axios from '../node_modules/axios'\nimport 'react-paginator/dist/index.css'\ninterface Props {}\ninterface State {\n  totalRecords: number\n  list: any[]\n  currentList: any[]\n  currentPage: number\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      totalRecords: 0,\n      currentPage: 0,\n      list: [],\n      currentList: []\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  onPageChanged = (data: PageData) => {\n    const { list } = this.state\n    const { currentPage, pageLimit } = data\n    const offset = (currentPage - 1) * pageLimit\n    const currentList = list.slice(offset, offset + pageLimit)\n    this.setState({ currentPage, currentList })\n  }\n\n  async fetchData() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n    this.setState({\n      list: res.data,\n      currentList: res.data.slice(0, 30),\n      totalRecords: res.data.length\n    })\n  }\n  render() {\n    const data = this.state.currentList.map((item: any, index: number) => {\n      return <pre key={index}>{JSON.stringify(item, null, 2)}</pre>\n    })\n    return (\n      <div>\n        <Pagination\n          totalRecords={this.state.totalRecords}\n          onPageChanged={this.onPageChanged}\n        />\n        {data}\n      </div>\n    )\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}